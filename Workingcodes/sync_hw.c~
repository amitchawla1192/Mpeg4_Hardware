#define _ISOC99_SOURCE
#include <Pipes.h>
#include "common/common.h"
//#include "encoder/ratecontrol.c"
//typedef x264_ratecontrol_t x264_ratecontrol_t;
//typedef predictor_t predictor_t;

#define RELATIVE_ADDRESS(point) if(h_hw->mb.point == NULL) \
                                h_hw->mb.point = NULL;\
                                else \
                                h_hw->mb.point = (intptr_t)h_hw->mb.point - (intptr_t)h_hw->mb.base + (intptr_t)mb_base; 




#define COPY_DERIALISE(x,y) switch (bfno)\
			{case 0: memcpy(x , Buff0 + derialize_pointer ,y);fprintf(stdout,"copied data bytes %d and %d \n",y,derialize_pointer); \
/*			 case 1: memcpy(x , Buff1 + derialize_pointer ,y); \
			 case 2: memcpy(x , Buff2 + derialize_pointer ,y); \
			 case 3: memcpy(x , Buff3 + derialize_pointer ,y); \
			 case 4: memcpy(x , Buff4 + derialize_pointer ,y); \
			 case 5: memcpy(x , Buff5 + derialize_pointer ,y); \
			 case 6: memcpy(x , Buff6 + derialize_pointer ,y); \
			 case 7: memcpy(x , Buff7 + derialize_pointer ,y); \*/\
			 }		\
                        derialize_pointer += y;   \
			if(derialize_pointer == recv_size[bfno])\
			{ derialize_pointer =0;\
			  read_buffer(recv_size, Buff0 );\
			}


uint32_t recv_size[15]={0};
char Buff0[512*1024];
char Buff1[512*1024];
char Buff2[512*1024];
char Buff3[512*1024];
char Buff4[512*1024];
char Buff5[512*1024];
char Buff6[512*1024];
char Buff7[512*1024];
char Buff8[512*1024];
char Buff9[512*1024];
char Buff10[512*1024];
char Buff11[512*1024];
char Buff12[512*1024];
char Buff13[512*1024];
char Buff14[512*1024];


void read_buffer(uint32_t *recv_sizem,char *Buffer)
{
*recv_sizem = read_uint32("in_data");

if(*recv_sizem)
{
//fprintf(stdout,"to read %d for buffer  \n ",*recv_sizem);
//for(int j=0;j<*recv_size; j++)
//{
read_uint32_n("in_data",Buffer,*recv_sizem); 

//fprintf(stdout,"recieved %d bytes \n",*recv_sizem);
/*
switch (l)
{
case 0: read_uint32_n("in_data",Buffer,recv_size[0]); fprintf(stdout,"recieved %d bytes 0 data \n",recv_size[0]);break;
case 1: read_uint32_n("in_data",Buffer,recv_size[1]); fprintf(stdout,"recieved %d bytes 1 data \n",recv_size[1]);break;
case 2: read_uint32_n("in_data",Buffer,recv_size[2]); fprintf(stdout,"recieved %d bytes 2 data \n",recv_size[2]);break;
case 3: read_uint32_n("in_data",Buffer,recv_size[3]); fprintf(stdout,"recieved %d bytes 3 data \n",recv_size[3]);break;
case 4: read_uint32_n("in_data",Buffer,recv_size[4]); fprintf(stdout,"recieved %d bytes 4 data \n",recv_size[4]);break;
case 5: read_uint32_n("in_data",Buffer,recv_size[5]); fprintf(stdout,"recieved %d bytes 5 data \n",recv_size[5]);break;
case 6: read_uint32_n("in_data",Buffer,recv_size[6]); fprintf(stdout,"recieved %d bytes 6 data \n",recv_size[6]);break;
case 7: read_uint32_n("in_data",Buffer,recv_size[7]); fprintf(stdout,"recieved %d bytes 7 data \n",recv_size[7]);break;
case 8: read_uint32_n("in_data",Buffer,recv_size[8]); fprintf(stdout,"recieved %d bytes 8 data \n",recv_size[8]);break;
case 9: read_uint32_n("in_data",Buffer,recv_size[9]); fprintf(stdout,"recieved %d bytes 9 data \n",recv_size[9]);break;
case 10: read_uint32_n("in_data",Buffer,recv_size[10]); fprintf(stdout,"recieved %d bytes 10 data \n",recv_size[10]);break;
case 11: read_uint32_n("in_data",Buffer,recv_size[11]); fprintf(stdout,"recieved %d bytes 11 data \n",recv_size[11]);break;
case 12: read_uint32_n("in_data",Buffer,recv_size[12]); fprintf(stdout,"recieved %d bytes 12 data \n",recv_size[12]);break;
case 13: read_uint32_n("in_data",Buffer,recv_size[13]); fprintf(stdout,"recieved %d bytes 13 data \n",recv_size[13]);break;
case 14: read_uint32_n("in_data",Buffer,recv_size[14]); fprintf(stdout,"recieved %d bytes 14 data \n",recv_size[14]);break;

}
*/
}
return;
}


void x264_sw_sync_open(x264_t *h)
{

x264_t L;
uint16_t quant4_mf0[1664/sizeof(uint16_t)];
int dequant4_mf0[96/sizeof(int)];
int unquant4_mf0[3328/sizeof(int)];
uint16_t quant4_bias0[1664/sizeof(uint16_t)];
uint16_t quant4_bias00[1664/sizeof(uint16_t)];
uint16_t quant4_bias1[1664/sizeof(uint16_t)];
uint16_t quant4_bias01[1664/sizeof(uint16_t)];
uint16_t quant8_mf0[6656/sizeof(uint16_t)];
int dequant8_mf0[1536/sizeof(int)];
int unquant8_mf0[13312/sizeof(int)];
uint16_t quant8_bias0[6656/sizeof(uint16_t)];
uint16_t quant8_bias00[6656/sizeof(uint16_t)];
uint16_t quant8_bias1[6656/sizeof(uint16_t)];
uint16_t quant8_bias01[6656/sizeof(uint16_t)];
uint16_t nr_offset_emergency[9216/sizeof(uint16_t)];
x264_frame_t *framesunused0[172/sizeof(x264_frame_t *)];
x264_frame_t *framesunused1[84/sizeof(x264_frame_t *)];
x264_frame_t *framescurrent[28/sizeof(x264_frame_t *)];
x264_frame_t *framesblank_unused[16/sizeof(x264_frame_t *)];
uint16_t cost_mv[70][65538/sizeof(uint16_t)];
//COPY_BUFFER(bfno,h->nal_buffer,1500068)
x264_t M;
x264_t *reconfig_h = &M;
//COPY_BUFFER(bfno,h->thread[0]->out.p_bitstream,1000000)
x264_nal_t thread0_outnal[96/sizeof(x264_nal_t)];
uint8_t mb_base[112896/sizeof(uint8_t)];
uint8_t intra_border_backup00[208/sizeof(uint8_t)];
uint8_t intra_border_backup01[208/sizeof(uint8_t)];
uint8_t intra_border_backup10[208/sizeof(uint8_t)];
uint8_t intra_border_backup11[208/sizeof(uint8_t)];
uint8_t deblock_strength0[704/sizeof(uint8_t)];
char scratch_buffer[512];
char scratch_buffer2[384];
x264_ratecontrol_t rc1;
x264_ratecontrol_t *rc= &rc1;
predictor_t rc_pred1;
predictor_t *rc_pred = &rc_pred1;
predictor_t rc_pred_b_from_p1;
predictor_t *rc_pred_b_from_p = &rc_pred_b_from_p1;
x264_t *h_hw;



/*
uint32_t recv_size[15]={0};
char Buff0[512*1024];
char Buff1[512*1024];
char Buff2[512*1024];
char Buff3[512*1024];
char Buff4[512*1024];
char Buff5[512*1024];
char Buff6[512*1024];
char Buff7[512*1024];
char Buff8[512*1024];
char Buff9[512*1024];
char Buff10[512*1024];
char Buff11[512*1024];
char Buff12[512*1024];
char Buff13[512*1024];
char Buff14[512*1024];
*/
int bfno=0;
uint32_t serialize_pointer=0,read_pointer=0;
unsigned int derialize_pointer=0;

h_hw = &L;
/**********  READING BUFFERS ***********/

for(int i=0;i<1;i++)
{
switch (i)
{case 0: read_buffer(recv_size+i,Buff0); break;
 /*case 1: read_buffer(recv_size+i,Buff1); break;
 case 2: read_buffer(recv_size+i,Buff2); break;
 case 3: read_buffer(recv_size+i,Buff3); break;
 case 4: read_buffer(recv_size+i,Buff4); break;
 case 5: read_buffer(recv_size+i,Buff5); break;
 case 6: read_buffer(recv_size+i,Buff6); break;
 case 7: read_buffer(recv_size+i,Buff7); break;
 case 8: read_buffer(recv_size+i,Buff8); break;
 case 9: read_buffer(recv_size+i,Buff9); break;
 case 10: read_buffer(recv_size+i,Buff10); break;
 case 11: read_buffer(recv_size+i,Buff11); break;
 case 12: read_buffer(recv_size+i,Buff12); break;
 case 13: read_buffer(recv_size+i,Buff13); break;
 case 14: read_buffer(recv_size+i,Buff14); break;*/
}
}




//
//
h_hw->thread[0] =(x264_t *)h_hw ;

//fprintf(stdout," address %p and %p \n ",h_hw->thread[0],h_hw);

//fprintf(stdout,"%d and  %d \n",h_hw-i>dequant4_mf, h_hw->dequant4_mf[0]);
COPY_DERIALISE(h_hw, sizeof(x264_t))
fprintf(stdout,"%d and %d are \n",h->param.i_width,h_hw->param.i_width);

COPY_DERIALISE(quant4_mf0,1664) h_hw->quant4_mf[0] = quant4_mf0;h_hw->quant4_mf[1] =quant4_mf0; h_hw->quant4_mf[2] =quant4_mf0;h_hw->quant4_mf[3] =quant4_mf0;
COPY_DERIALISE(dequant4_mf0,384) h_hw->dequant4_mf[0] = dequant4_mf0;h_hw->dequant4_mf[1] = dequant4_mf0;h_hw->dequant4_mf[2] = dequant4_mf0;h_hw->dequant4_mf[3] = dequant4_mf0;
COPY_DERIALISE(unquant4_mf0,3328) h_hw->unquant4_mf[0] = unquant4_mf0;h_hw->unquant4_mf[1] = unquant4_mf0;h_hw->unquant4_mf[2] = unquant4_mf0;h_hw->unquant4_mf[3] = unquant4_mf0;
COPY_DERIALISE(quant4_bias0,1664) h_hw->quant4_bias[0] = quant4_bias0;h_hw->quant4_bias[2] = quant4_bias0;
COPY_DERIALISE(quant4_bias00,1664) h_hw->quant4_bias0[0] = quant4_bias00;h_hw->quant4_bias0[2] = quant4_bias00;
COPY_DERIALISE(quant4_bias1,1664) h_hw->quant4_bias[1] = quant4_bias1;h_hw->quant4_bias[3] = quant4_bias1;
COPY_DERIALISE(quant4_bias01,1664) h_hw->quant4_bias0[1] = quant4_bias01;h_hw->quant4_bias0[3] = quant4_bias01;
COPY_DERIALISE(quant8_mf0,6656) h_hw->quant8_mf[0]= quant8_mf0;h_hw->quant8_mf[1]= quant8_mf0;
COPY_DERIALISE(dequant8_mf0,1536) h_hw->dequant8_mf[0] = dequant8_mf0;h_hw->dequant8_mf[1] = dequant8_mf0;
COPY_DERIALISE(unquant8_mf0,13312) h_hw->unquant8_mf[0] = unquant8_mf0;h_hw->unquant8_mf[1] = unquant8_mf0;
COPY_DERIALISE(quant8_bias0,6656) h_hw->quant8_bias[0] = quant8_bias0;
COPY_DERIALISE(quant8_bias00,6656) h_hw->quant8_bias0[0]= quant8_bias00;
COPY_DERIALISE(quant8_bias1,6656) h_hw->quant8_bias[1] = quant8_bias1;
COPY_DERIALISE(quant8_bias01,6656) h_hw->quant8_bias0[1] = quant8_bias01;

COPY_DERIALISE(nr_offset_emergency,9216) h_hw->nr_offset_emergency = nr_offset_emergency;
COPY_DERIALISE(framesunused0,172) h_hw->frames.unused[0]= framesunused0;
COPY_DERIALISE(framesunused1,84) h_hw->frames.unused[1]= framesunused1;
COPY_DERIALISE(framescurrent,28) h_hw->frames.current = framescurrent;

COPY_DERIALISE(framesblank_unused,16) h_hw->frames.blank_unused= framesblank_unused;
#define COST_MV(i) &cost_mv[k][0]
for(int k=0;k<70;k++)
{
COPY_DERIALISE(COST_MV(k),65538)
h_hw->cost_mv[k] = COST_MV(k)+ 2*4*2048 ;
//fprintf(stdout,"%d \n",COST_MV(k));
}
#undef COST_MV(i)

fprintf(stdout,"%p and %p are \n",h->mb.base,h->mb.base);

//COPY_BUFFER(bfno,h->nal_buffer,1500068)
COPY_DERIALISE(reconfig_h,50432) h_hw->reconfig_h = reconfig_h;
//COPY_BUFFER(bfno,h->thread[0]->out.p_bitstream,1000000)

COPY_DERIALISE(thread0_outnal,96)
h_hw->out.nal = thread0_outnal;

fprintf(stdout,"%p and %p are \n",h->mb.base,h->mb.base);

//fprintf(stdout,"%d and %d are \n",h_hw->mb.i_qp,h->mb.i_qp);
COPY_DERIALISE(mb_base,1000) 
//fprintf(stdout,"fine here buddy \n");
fprintf(stdout,"%p and %p are \n",h->mb.base,h->mb.base);

RELATIVE_ADDRESS(qp)
//fprintf(stdout,"%p and %p are \n",((intptr_t)h->mb.qp - (intptr_t)h->mb.base,h->mb.base);

RELATIVE_ADDRESS(cbp)
RELATIVE_ADDRESS(mb_transform_size)
RELATIVE_ADDRESS(slice_table)
RELATIVE_ADDRESS(intra4x4_pred_mode)
RELATIVE_ADDRESS(non_zero_count)
RELATIVE_ADDRESS(skipbp)
RELATIVE_ADDRESS(chroma_pred_mode)
RELATIVE_ADDRESS(mvd[0])
RELATIVE_ADDRESS(mvd[1])
RELATIVE_ADDRESS(mvr[0][1])
RELATIVE_ADDRESS(mvr[0][2])
RELATIVE_ADDRESS(mvr[0][3])
RELATIVE_ADDRESS(mvr[0][4])
RELATIVE_ADDRESS(mvr[1][0])
RELATIVE_ADDRESS(mvr[1][1])
RELATIVE_ADDRESS(mvr[1][2])
RELATIVE_ADDRESS(mvr[1][3])
RELATIVE_ADDRESS(p_weight_buf[0])
RELATIVE_ADDRESS(p_weight_buf[1])
h_hw->mb.base = mb_base;

fprintf(stdout,"difference is %p and %p and %p",((intptr_t)h->mb.cbp -(intptr_t)h->mb.base),((intptr_t)h_hw->mb.cbp - (intptr_t)h_hw->mb.base),mb_base);

COPY_DERIALISE(intra_border_backup00,208) h_hw->intra_border_backup[0][0] = intra_border_backup00; 
COPY_DERIALISE(intra_border_backup01,208) h_hw->intra_border_backup[0][1] = intra_border_backup01;
COPY_DERIALISE(intra_border_backup10,208) h_hw->intra_border_backup[1][0] = intra_border_backup10;
COPY_DERIALISE(intra_border_backup11,208) h_hw->intra_border_backup[1][1] = intra_border_backup11;
COPY_DERIALISE(deblock_strength0,704) h_hw->deblock_strength[0] = deblock_strength0;
COPY_DERIALISE(scratch_buffer,512) h_hw->scratch_buffer = scratch_buffer;
COPY_DERIALISE(scratch_buffer2,384) h_hw->scratch_buffer2 = scratch_buffer2;
COPY_DERIALISE(rc,656) h_hw->rc = rc;
COPY_DERIALISE(rc_pred,100) h_hw->rc->pred = rc_pred;

COPY_DERIALISE(rc_pred_b_from_p,20) h_hw->rc->pred_b_from_p = rc_pred_b_from_p;



// for(int i=0;i <12;i++ )
//fprintf(stdout,"%p \n",h_hw->dequant4_mf[0][i]);

for(int i=0;i<6;i++)
{
for(int j=0;j<16;j++)
{
if(h_hw->dequant4_mf[0][i][j] == h->dequant4_mf[0][i][j])
fprintf(stdout,"Data seems to be copied safe %p sizeof(int) is %p and %p  \n",&h_hw->dequant4_mf[0][i][j],&h->dequant4_mf[0][i][j],dequant4_mf0);
else
fprintf(stdout, " Data seems to be noisy \n EXiting x264_sync_close");

}
}

return;
}


